// Generated by gencpp from file mecanum_robot/rotary_encoder.msg
// DO NOT EDIT!


#ifndef MECANUM_ROBOT_MESSAGE_ROTARY_ENCODER_H
#define MECANUM_ROBOT_MESSAGE_ROTARY_ENCODER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mecanum_robot
{
template <class ContainerAllocator>
struct rotary_encoder_
{
  typedef rotary_encoder_<ContainerAllocator> Type;

  rotary_encoder_()
    : rf(0)
    , rb(0)
    , lf(0)
    , lb(0)  {
    }
  rotary_encoder_(const ContainerAllocator& _alloc)
    : rf(0)
    , rb(0)
    , lf(0)
    , lb(0)  {
  (void)_alloc;
    }



   typedef int32_t _rf_type;
  _rf_type rf;

   typedef int32_t _rb_type;
  _rb_type rb;

   typedef int32_t _lf_type;
  _lf_type lf;

   typedef int32_t _lb_type;
  _lb_type lb;





  typedef boost::shared_ptr< ::mecanum_robot::rotary_encoder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mecanum_robot::rotary_encoder_<ContainerAllocator> const> ConstPtr;

}; // struct rotary_encoder_

typedef ::mecanum_robot::rotary_encoder_<std::allocator<void> > rotary_encoder;

typedef boost::shared_ptr< ::mecanum_robot::rotary_encoder > rotary_encoderPtr;
typedef boost::shared_ptr< ::mecanum_robot::rotary_encoder const> rotary_encoderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mecanum_robot::rotary_encoder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mecanum_robot::rotary_encoder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mecanum_robot::rotary_encoder_<ContainerAllocator1> & lhs, const ::mecanum_robot::rotary_encoder_<ContainerAllocator2> & rhs)
{
  return lhs.rf == rhs.rf &&
    lhs.rb == rhs.rb &&
    lhs.lf == rhs.lf &&
    lhs.lb == rhs.lb;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mecanum_robot::rotary_encoder_<ContainerAllocator1> & lhs, const ::mecanum_robot::rotary_encoder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mecanum_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mecanum_robot::rotary_encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mecanum_robot::rotary_encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mecanum_robot::rotary_encoder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mecanum_robot::rotary_encoder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mecanum_robot::rotary_encoder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mecanum_robot::rotary_encoder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mecanum_robot::rotary_encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74f45829c12e561eeb9d8f0eca726753";
  }

  static const char* value(const ::mecanum_robot::rotary_encoder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74f45829c12e561eULL;
  static const uint64_t static_value2 = 0xeb9d8f0eca726753ULL;
};

template<class ContainerAllocator>
struct DataType< ::mecanum_robot::rotary_encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mecanum_robot/rotary_encoder";
  }

  static const char* value(const ::mecanum_robot::rotary_encoder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mecanum_robot::rotary_encoder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 rf\n"
"int32 rb\n"
"int32 lf\n"
"int32 lb\n"
;
  }

  static const char* value(const ::mecanum_robot::rotary_encoder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mecanum_robot::rotary_encoder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rf);
      stream.next(m.rb);
      stream.next(m.lf);
      stream.next(m.lb);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rotary_encoder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mecanum_robot::rotary_encoder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mecanum_robot::rotary_encoder_<ContainerAllocator>& v)
  {
    s << indent << "rf: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rf);
    s << indent << "rb: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rb);
    s << indent << "lf: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lf);
    s << indent << "lb: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lb);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MECANUM_ROBOT_MESSAGE_ROTARY_ENCODER_H
