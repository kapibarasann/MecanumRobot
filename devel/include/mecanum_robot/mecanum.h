// Generated by gencpp from file mecanum_robot/mecanum.msg
// DO NOT EDIT!


#ifndef MECANUM_ROBOT_MESSAGE_MECANUM_H
#define MECANUM_ROBOT_MESSAGE_MECANUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mecanum_robot
{
template <class ContainerAllocator>
struct mecanum_
{
  typedef mecanum_<ContainerAllocator> Type;

  mecanum_()
    : move_name()
    , mode()
    , speed(0.0)
    , direction(0.0)
    , stop(false)  {
    }
  mecanum_(const ContainerAllocator& _alloc)
    : move_name(_alloc)
    , mode(_alloc)
    , speed(0.0)
    , direction(0.0)
    , stop(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _move_name_type;
  _move_name_type move_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _direction_type;
  _direction_type direction;

   typedef uint8_t _stop_type;
  _stop_type stop;





  typedef boost::shared_ptr< ::mecanum_robot::mecanum_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mecanum_robot::mecanum_<ContainerAllocator> const> ConstPtr;

}; // struct mecanum_

typedef ::mecanum_robot::mecanum_<std::allocator<void> > mecanum;

typedef boost::shared_ptr< ::mecanum_robot::mecanum > mecanumPtr;
typedef boost::shared_ptr< ::mecanum_robot::mecanum const> mecanumConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mecanum_robot::mecanum_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mecanum_robot::mecanum_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mecanum_robot::mecanum_<ContainerAllocator1> & lhs, const ::mecanum_robot::mecanum_<ContainerAllocator2> & rhs)
{
  return lhs.move_name == rhs.move_name &&
    lhs.mode == rhs.mode &&
    lhs.speed == rhs.speed &&
    lhs.direction == rhs.direction &&
    lhs.stop == rhs.stop;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mecanum_robot::mecanum_<ContainerAllocator1> & lhs, const ::mecanum_robot::mecanum_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mecanum_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::mecanum_robot::mecanum_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mecanum_robot::mecanum_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mecanum_robot::mecanum_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mecanum_robot::mecanum_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mecanum_robot::mecanum_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mecanum_robot::mecanum_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mecanum_robot::mecanum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82aef74aa7bb475fb26508dafa9bb21f";
  }

  static const char* value(const ::mecanum_robot::mecanum_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82aef74aa7bb475fULL;
  static const uint64_t static_value2 = 0xb26508dafa9bb21fULL;
};

template<class ContainerAllocator>
struct DataType< ::mecanum_robot::mecanum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mecanum_robot/mecanum";
  }

  static const char* value(const ::mecanum_robot::mecanum_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mecanum_robot::mecanum_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string move_name\n"
"string mode\n"
"float32 speed\n"
"float32 direction\n"
"bool stop\n"
;
  }

  static const char* value(const ::mecanum_robot::mecanum_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mecanum_robot::mecanum_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.move_name);
      stream.next(m.mode);
      stream.next(m.speed);
      stream.next(m.direction);
      stream.next(m.stop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mecanum_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mecanum_robot::mecanum_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mecanum_robot::mecanum_<ContainerAllocator>& v)
  {
    s << indent << "move_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.move_name);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "direction: ";
    Printer<float>::stream(s, indent + "  ", v.direction);
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MECANUM_ROBOT_MESSAGE_MECANUM_H
